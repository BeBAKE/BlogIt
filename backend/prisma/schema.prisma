generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String      @id @default(uuid())
  fullName  String
  email     String      @unique
  password  String
  blogs     Blog[]
  Bookmark  Bookmark[]
  drafts    Draft[]
  Following Following[] @relation("following")
  Follower  Following[] @relation("follower")
}

model Blog {
  id           String     @id @unique
  summaryTitle String     @db.VarChar
  summaryBody  String     @db.VarChar
  title        Json       @db.Json
  body         Json       @db.Json
  authorId     String
  authorName   String
  createdAt    DateTime   @default(now())
  // adding image here too
  image        String?
  user         User       @relation(fields: [authorId], references: [id])
  Bookmark     Bookmark[]
}

model Draft {
  id         String   @id @unique
  title      Json     @db.Json
  body       Json     @db.Json
  authorId   String
  authorName String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Draft_authorId_fkey")
}

model Bookmark {
  id           String   @id
  userId       String //means the user who has bookmarked it
  blogId       String
  bookmarkedAt DateTime @default(now())
  blog         Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, map: "Bookmark_blogId_fk")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Bookmark_userId_fk")
}

model Following {
  id          String   @id @default(uuid())
  followingId String
  followerId  String
  createdAt   DateTime @default(now())

  Following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade, map: "Follwing_User_fk")
  Follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, map: "Follower_User_fk")

  @@unique(fields: [followerId, followingId], name: "unique_follower_following_constraint", map: "follower_following_unique")
  // @@index(fields: [followingId, followerId], map: "follower_following_index")
  @@index(fields: [followingId], map: "following_index")
  @@index(fields: [followerId], map: "follower_index")
}

// between Draft and Blog , only one exists at a time
